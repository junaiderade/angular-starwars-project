{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/header/header.component.css","webpack:///./src/app/header/header.component.html","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/item/item.component.css","webpack:///./src/app/item/item.component.html","webpack:///./src/app/item/item.component.ts","webpack:///./src/app/list/list.component.css","webpack:///./src/app/list/list.component.html","webpack:///./src/app/list/list.component.ts","webpack:///./src/app/log.service.ts","webpack:///./src/app/star-wars.service.ts","webpack:///./src/app/tabs/tabs.component.css","webpack:///./src/app/tabs/tabs.component.html","webpack:///./src/app/tabs/tabs.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./create-character/create-character.module\": [\n\t\t\"./src/app/create-character/create-character.module.ts\",\n\t\t\"create-character-create-character-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule} from '@angular/router';\nimport { TabsComponent } from './tabs/tabs.component';\nimport { ListComponent } from './list/list.component';\n// u need to import all the components u use in the routes\n\nconst appRoutes = [\n  { path: 'characters', component: TabsComponent, children: [\n    {path: '', redirectTo: 'all', pathMatch: 'full'},\n    // this appends all to the existing path, loads side with all as the value of the default tab, the pathMatch parameter changes\n    // in this it would be /characters or /characters/all or /characters/full\n     // the default matching strategy which is preifx\n    {path: ':side', component: ListComponent}\n  ]},\n  // here u r loading the tabs component for an ampty path.\n  // path is the part after your domain\n  { path: 'new-character', loadChildren: './create-character/create-character.module#CreateCharacterModule'},\n  // HERE U HAD A HUGE ERROR WHERE U OG HAD .ts IN THIS ABOVE ROUTE BUT HAD TO REMOVE IT AND THEN IT WORKED\n  // the # specifies the name of the module from th export class in the create character module ts\n  // loadChildren allows u to point to a route to a specific module,the create character module ts\n  // u need to restart ng Serve if u implement the loadCHildren feature\n  // no need for a slash\n  {path: '**', redirectTo: '/characters'}\n  // this route is added so an invalid route does not crash ur application, must be the last route to work.\n  ];\n\n@NgModule({\nimports: [\n  RouterModule.forRoot(appRoutes)\n  // this registers our routes in the router module provided by angular\n],\nexports: [\n  RouterModule\n  // by default feautures in a module are encapsulated to that module, so simply importing this\n// into app module aint gon help so u use this. this makes it available to any module which imports it\n]\n}) // a module is only a module if it has this\nexport class AppRoutingModule {}\n// u import this into the app module\n// by default feautures in a module are encapsulated to that module, so simply importing this\n// into app module aint gon help\n","module.exports = \".container {\\n  padding: 30px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBwYWRkaW5nOiAzMHB4O1xufVxuIl19 */\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12\\\">\\n      <app-header></app-header>\\n      <!-- <app-create-character></app-create-character> -->\\n    </div>\\n  </div>\\n  <hr>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12\\\">\\n        <!-- <app-tabs></app-tabs> -->\\n        <router-outlet></router-outlet>\\n        <!-- this is where angular puts the to-be loaded content,\\n        this tells angular to load your root routes (from app module)\\n      -->\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { StarWarsService } from './star-wars.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  swService: StarWarsService;\n\nconstructor(swService: StarWarsService){\n  this.swService = swService;\n}\n\n  ngOnInit() {\n    this.swService.fetchCharacters(); // you use this to access API\n    // this was originally in the list ts componenet but u moved it here because u dont want it to reset everytime\n    // the list componenet gets initialized\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { TabsComponent } from './tabs/tabs.component';\nimport { ListComponent } from './list/list.component';\nimport { ItemComponent } from './item/item.component';\nimport { StarWarsService } from './star-wars.service';\nimport { LogService } from './log.service';\nimport { HeaderComponent } from './header/header.component';\nimport { HttpModule } from '@angular/http';\nimport { AppRoutingModule } from './app-routing.module';\n\n\n\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TabsComponent,\n    ListComponent,\n    ItemComponent,\n    HeaderComponent\n  ],\n  imports: [\n    BrowserModule, // you can only use this once in ur whole app\n    HttpModule,\n    AppRoutingModule\n  ],\n  providers: [StarWarsService, LogService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<ul class=\\\"nav nav-pills nav-fill\\\">\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" >\\n      <a class=\\\"nav-link\\\" routerLink=\\\"/characters\\\">Home</a>\\n      <!-- the routerlink is an angulardirective and has to do with router module -->\\n    </li>\\n    <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"new-character\\\">New Character</a>\\n    </li>\\n</ul>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2l0ZW0vaXRlbS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"    <a style=\\\"cursor: pointer\\\" class=\\\"list-group-item\\\"> <!-- this a tag used to be an href but u set the style so it gives u a nice looking cursor -->\\n        <h4 class=\\\"mb-1\\\"> {{character.name}} </h4>\\n        <!-- this character.name comes from the list component ngFor, there is also an input for it in item ts file -->\\n<div>\\n<button class=\\\"btn btn-primary\\\" (click)= \\\" onAssign('light')\\\">Light</button>\\n<button class=\\\"btn btn-danger\\\" (click)= \\\" onAssign('dark')\\\">Dark</button>\\n</div>\\n    </a>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { StarWarsService } from '../star-wars.service';\n\n@Component({\n  selector: 'app-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.css']\n\n})\nexport class ItemComponent implements OnInit {\n@Input() character;\nswService: StarWarsService;\n// swService is of type StarWarsService\n\n  constructor(swService: StarWarsService) {\n  this.swService = swService;\n   }\n\n  ngOnInit() {\n  }\n\nonAssign(side1) {\nthis.swService.onSideAssigned2({name: this.character.name, side: side1 });\n// here u import from the service and use its onSideAssigned2 method\n// this method is called in the item html\n\n}\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QvbGlzdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"list-group\\\">\\n  <app-item\\n  *ngFor=\\\"let char of characters\\\"\\n  [character]=\\\"char\\\"\\n  >\\n  <!-- this loop shows each item in list.char is the var name u assigned in the loop and characters is the name of the array  -->\\n  <!-- the ngfor inside app item means it creates  an <app-item> for every character in the data-->\\n  <!-- the [character] =\\\"char\\\" means that the word character in the app-item represents char from here -->\\n</app-item>\\n</div>\\n\\n\"","import { Component, OnInit, Input, OnDestroy} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StarWarsService } from '../star-wars.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit, OnDestroy { // on destroy is used to unsbscribe from subscriptions\ncharacters = [];\nactivatedRoute: ActivatedRoute; // Contains the information about a route associated with a component loaded in an outlet\nswService: StarWarsService; // injects your data, remember that StarWarsService is the type of service\n// and that all types need to be imported\n// remember, u set all ur data in the starwars service\nloadedSide: 'all'; // means loaded side is all by default\nsubscription: Subscription;\n\n  constructor(activatedRoute: ActivatedRoute, swService: StarWarsService) {\n   // i think the reason you pass these parameters in specific is because you only set the type when u initialized the variabls\n   // but u didnt set the value and this sets that value\n    this.activatedRoute = activatedRoute;\n    this.swService = swService;\n    // this constructer function sets the values the object needs with the info from parameters\n    // Use the constructor to initialize class members and\n    // for dependency injection. Use ngOnInit for initialization and logic work.\n   }\n\n  ngOnInit() {\n    // ngOnInit signals that Angular has finished initializing and setting up component.\n    //  The ngOnInit is called after the constructor is executed.\n    this.activatedRoute.params.subscribe( // subscribe can fit 3 functions\n      // subscribe is a method from rxjs which angular uses internally\n      // how this method works. you get the params from the activated route.\n      // if you go to routes u will see where params comes from. subscribe listens for changes in params aka the url\n      // it uses getcharacters from the swService to get the characters for whichiver side u are on\n      (params) => { // this function is executed whenever parameters change\n        this.characters = this.swService.getCharacters(params.side); // params.side comes from the routing in app module.it is an observable\n        this.loadedSide = params.side;\n      }\n    );\n\n    this.subscription = this.swService.charactersChanged.subscribe(\n      // this subscribes to the charactersChanged variable in swService, which is an observable so it can be subscribed to\n      // chractersChanged gets .next in the onSideAssigned2 method which triggers this\n      () => {\n        this.characters = this.swService.getCharacters(this.loadedSide); // gets characters for currently loaded list\n        // u were having a problem of when u switched a character while in light or dark,\n        // it doesnt dissapear and go until u click on the other. this fixes that by making it reactive\n      }\n\n    );\n\n  }\n\n  ngOnDestroy() { // angular executes this method whenever this component is about to get destroyed\n    // a componenent is destroyed when routes changed, but there are other ways too\nthis.subscription.unsubscribe(); // this removes the subscription so it doesnt pollute memory\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n  constructor() { }\n\nwriteLog(logText) {\nconsole.log(logText);\n}\n// the goal of this method is to log whenever the side of a character is changed\n\n}\n","import { LogService } from './log.service';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Http, Response } from '@angular/http'; // note that both response and http come from angular/http\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class StarWarsService {\n\n  private characters = [\n    {name: 'Luke Skywalker', side: ''},\n    // side is null because user should assign them, defaults to all\n    {name: 'Darth Vader', side: ''},\n    {name: 'Obi-wan Kenobi', side: ''},\n    {name: 'Darth Maul', side: ''}\n    ];\n  private logService: LogService;\n  // u created this because the constructor needs to bind to a property\n  charactersChanged = new Subject<void>(); // indicates something abt the characters array changed\n  // a subject is an object provided by that rxjs package, it is like an event emitter, u can emit a value and subscribe to it\n  // subject subject is a constructor technically\n  http: Http; // you use this to reach out to the web. This service allows us to send all types of requests (get, post, etc).\n  // u had to import this in app module\n\nconstructor(logService: LogService, http: Http) {\nthis.logService = logService;\nthis.http = http;\n}\n\n\n// ------------------------\n// so far this function gets an api, transforms the data, then logs it\nfetchCharacters() { // here u reach out to the API\nthis.http.get('https://swapi.co/api/people/').map((response: Response) => {\nconst data1 = response.json(); // this extracts the data and turns it from json to a real js object\nconst extractedCharacters = data1.results; // this is here because you dont need all the data, just the objects in the results property\nconst charsToChange = extractedCharacters.map((char2) => {\nreturn {name: char2.name , side: ''}; // char name is a property of the data u would get back if you console.logged the api\n}); // THIS MAP FUNCTION IS A WHOLE DIFF TYPE THAN THE ABOVE, it comes form js not rxjs\n// the purpose of the second map function is to transform the old object arrays with all the stuff we dont need and turn it into a new\n// array with just the stuff we need. char.name exists because name is a property of the og object from the API\nreturn charsToChange; // remember, charsToChange is an array\n})\n// you have to import the map operator, you use map to transform the response\n.subscribe( // you use in this function on what is returned from the map function\n(data) => { // this logs the data u get from the map method\n  console.log(data);\n  this.characters = data;\n  this.charactersChanged.next(); // this lets the subscribe function in list ts know of a change! so data is loaded right\n}\n);\n// angular uses observables to manage requests.if there is no subscription, it does not send a request. that's why u have the console.log\n// this.http.post(url, data) // this is how a post request would work. just an ex\n// the get method takes one argument at least, but u can pass a optional second. get(url, js object where u can configure extra options)\n}\n\n// -----------------------\ngetCharacters(chosenList) {\n  if (chosenList === 'all') {\n   return this.characters.slice();\n  }\n  return this.characters.filter((char) => {\n  return char.side === chosenList;\n  });\n  }\n  //  slice returns a copy of the array, this is here so u cant edit the original array\n  // remember that return statements cease execution in a function! so if this return\n  // is reached it's over\n  // gets the characters in THIS class\n  // filter method only returns a subset of the characters that satisfies that condtion\n  // the chole char => means the char will be passed into the\n  // you are checking if the char matches your chosen list, which is all rn\n  // says char is equal or greater than than the boolean expression\n// ---------------------------\nonSideAssigned2(charInfo2) {\n  const pos = this.characters.findIndex((char) => {\n    // the findIndex function works like this: it returns the index of the first element which satisifes the condition\n    // it executes the function once for each element in the array. if it doesnt find anything it returns -1\n    return char.name === charInfo2.name;\n  });\n  this.characters[pos].side = charInfo2.side;\n  // this part of the function takes pos, the const from above and switches its side\n  this.charactersChanged.next(); // this means u emit the next value for the subject, this is for purposes of reactivity.\n  this.logService.writeLog('Changed side of ' + charInfo2.name + ' to ' + charInfo2.side);\n  // this calls the logService property u made in this class\n  }\n  // const means the function does not modify observable state of the object\n  // pos represents position\n  // the find index method finds the index where the boolean equals true\n  // (char => {} ) is the same as function(char) {}\n  // that func returns a boolean, it returns true if char.name is the same as charInfo2.name\n  // once it returns true, findIndex will give u the position of that element which u labeled pos\n  // last line is self explanatory. it sets the side to the side of the data recieved\n  // -----------------------\naddCharacter(name, side) {\n  const pos = this.characters.findIndex((char) => {\n    return char.name === name;\n  }); // same method inluded as onSideAssigned\n  if (pos !== -1) {\n// position will be -1 if no name is found, preventing user from not entering name or entering the same name\n  return;\n}\n// remember that returning exits from the function\n  const newChar = {name, side};\n  this.characters.push(newChar);\n}\n// these parameters come from create-character form\n\n\n\n\n}\n","module.exports = \"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3RhYnMvdGFicy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div>\\n\\n<ul class=\\\"nav nav-tabs\\\" >\\n\\n\\n<li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n    <a class=\\\"nav-link\\\" routerLink=\\\"/characters/all\\\">All</a>\\n  </li>\\n\\n<li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n      <a class=\\\"nav-link\\\" routerLink=\\\"/characters/light\\\">Light</a>\\n  </li>\\n<li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/characters/dark\\\">Dark</a>\\n  </li>\\n\\n</ul>\\n<router-outlet></router-outlet>\\n</div>\\n\"","// u removed a ton of code during the cleanup\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.css']\n  // in the providers array, u define all the types angular should provide for u\n})\nexport class TabsComponent implements OnInit {\n\n\nconstructor() {\n   }\n\nngOnInit() {\n  }\n\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}